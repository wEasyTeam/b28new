#!/usr/bin/perl -w

#########################################################
#        Created by linguang at 2013/12/24           #
#########################################################
# modify @2015/1/21 by lvjs
# 
# This File is used to make product support the web 
# automically with chinese-english language even more. 
# Using this file can automically generate some files 
# which name format is "xxx.json", eg: "login.json"
# is one language js of login module.


#use strict;
use warnings;
use Spreadsheet::XLSX;
use Encode;

#########################################################
#
# Configurations
# 
#########################################################

# Run this program with debugging trace
my $debug_mode = 0;

# file header for generated js file
my $file_header = "/* This file is automatically generated by web_lang_gen_json.pl.  Do not modify by hand. */";

#########################################################
#
# Global variables
# 
#########################################################

# Parameters from command line

# The unique configuration excel file name of every product.
my $excel_filename = $ARGV[0];
# Target directory
my $target_dir = $ARGV[1];


# If any of these three parameters is empty, exit and print err message!
unless ($target_dir) {
    print "\nUsage: ".__FILE__." <EXCELFILE NAME> <TARGET_PATH>\n\n";
    exit 0;
}

# The target path where the js file generated automically stored.
my $js_output_path = "$target_dir/lang";

# The directory where the unique excel file stored.
my $excel_file_dir = "./$excel_filename";

######################################################
#
# Subroutines
# 
######################################################

sub error
{
    my $msg = shift;
    die "***** ERROR: $msg\n";
}

sub debug
{
    if ($debug_mode) {
        print " "."$_[0]";
    }
}

sub parse_special_char{

	#Parse '\n'
	if ($_[0] =~ /\n/)
	{
		$_[0] =~ s/[\r\n]/ /g;
	}
	#Parse '&' 
	if ($_[0] =~ /&amp;/)
	{
		$_[0] =~ s/&amp;/&/g;
	}
	#Parse '<' 
	if ($_[0] =~ /&lt;/)
	{
		$_[0] =~ s/&lt;/</g;
	}
	#Parse '>'
	if ($_[0] =~ /&gt;/)
	{
		$_[0] =~ s/&gt;/>/g;
	}
	#Parse '"'
	if ($_[0] =~ /&quot;/)
	{
		$_[0] =~ s/&quot;/"/g;
	}
	#Parse '''
	if ($_[0] =~ /&apos;/)
	{
		$_[0] =~ s/&apos;/'/g;
	}
	if ($_[0] =~ /[^\\]"/)
	{
		$_[0] =~ s/"/\\"/g;
	}
	
	return $_[0];
}


######################################################
#
# Main program begins
# 
######################################################

# If the configuration excel file is not existing. 
unless (-e $excel_file_dir) {
    error "Cannot open the config file $excel_file_dir!";
}

unless (-e $js_output_path)
{
	mkdir $js_output_path;
}

# Parse the excel file and place it in 'new' object.
debug "Start to analyse excel file!\n";
my $excel = Spreadsheet::XLSX -> new ($excel_file_dir);
debug "Analysing excel file is to ending!\n";

my @output_js_table = ();

my $aleady_generated = 0;

# iterate all worksheet in the excel file. 
foreach my $sheet (@{$excel -> {Worksheet}}) {
        
	debug "Sheet= $sheet->{Name}\n";
	
	my $struct_name = $sheet->{Name};
	my $first_enter = 0;
	my $max_lang_num = 0;
	
	#Firstly, Create and open all necessary files!
	$sheet -> {MaxCol} ||= $sheet -> {MinCol};
	foreach my $col (($sheet -> {MinCol} + 1)..  $sheet -> {MaxCol}) 
	{
		my $cell = $sheet -> {Cells} [0] [$col];
		if ($cell) 
		{
			my $value = $cell->{Val};
			$value = encode("utf8", decode("utf8", $value));
			
			#If this col is notes, we regardless of it!
			next if ($value =~ /Notes/i);
			
			my $target_dir = "$js_output_path/$value";
			
			# Record the worksheet contains how many languages!
			$max_lang_num++;
			
			# if directory of "cn" or "en" is not exist,  create it!
 			unless (-e $target_dir)
			{
				system "mkdir -p $target_dir";
			}
			
			my $index = ($col - 1);
				
			$output_js_table[$index] = "OUT_JS_FILE_$value";
			
			my $temp_filehandle = $output_js_table[$index];	
			
			my $target_file = "$target_dir/$struct_name.json";;
			
			# Create and open output JS file
			open ($temp_filehandle, ">".$target_file) or error "Cannot create output file $target_file!";
			
			# Add file headers
			#print $temp_filehandle $file_header;	
			
			
			#modify file type:js to json
			print $temp_filehandle "{\n";
		}
		
	}
	
	#write all information to the JS file!
	$sheet -> {MaxRow} ||= $sheet -> {MinRow};
	foreach my $row (($sheet -> {MinRow} + 1) .. $sheet -> {MaxRow}) 
	{
		$sheet -> {MaxCol} ||= $sheet -> {MinCol};
		foreach my $col (($sheet -> {MinCol})..  $max_lang_num) 
		{
			my $cell = $sheet -> {Cells} [$row] [$col];
			my $value;
			if ($cell) 
			{
				$value = $cell->{Val};
				$value = encode("utf8", decode("utf8", $value));
			}
			
			if ($col == 0)
			{
				foreach my $output_js_table(@output_js_table) 
				{
					if ($value)
					{
						parse_special_char($value);
						print $output_js_table "\"$value\":";
					}
					else
					{
						print $output_js_table "\"\":";
					}
				}
			}
			else
			{

				my $temp_file = $output_js_table[$col - 1];
				if ($row != $sheet -> {MaxRow})
				{	
					if ($value)
					{
						
						parse_special_char($value);
						print $temp_file  " \"$value\",\n";	
					}
					else
					{
						print $temp_file  " \"\",\n";
					}
						
				}
				else
				{
					
					if ($value)
					{
						parse_special_char($value);
						print $temp_file  " \"$value\"\n";	
					}
					else
					{
						print $temp_file  " \"\"\n";
					}
					
				}
				
			}
		}
	}
	
	foreach my $output_js_table(@output_js_table) 
	{
		#print $output_js_table "});";
		#modify file type:js to json
		print $output_js_table "}";
	}
	debug "\n"; ## one worksheet over
}

# close all files
foreach my $output_js_table(@output_js_table) 
{
	close($output_js_table);
}
debug "Generating $excel_filename successfully!\n";